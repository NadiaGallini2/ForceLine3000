import os
import re
import streamlit as st
import pandas as pd
from pandas_profiling import ProfileReport
import xml.etree.ElementTree as ET

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(layout="wide", page_title="Force Line", page_icon="üìß")

# –ó–∞–≥—Ä—É–∑–∫–∞ CSS –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—è
def load_css(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSS –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.""" 
    with open(file_path) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

css_file = 'style.css'
load_css(css_file)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
with st.sidebar:
    st.title("üìß Force Line")
    choice = st.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ó–∞–≥—Ä—É–∑–∫–∞", "–ê–Ω–∞–ª–∏–∑", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–≠–∫—Å–ø–æ—Ä—Ç"])
    st.info("ü§ñ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.markdown("<h1 style='color: #d51d29;'>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Force Line! üìß</h1>", unsafe_allow_html=True)
st.markdown("üëã –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Ç–∏–ø–∞–º –∏ –≤—ã–¥–µ–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists('./dataset.csv'):
    df = pd.read_csv('dataset.csv', index_col=None)
else:
    df = pd.DataFrame()  # –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
if choice == "–ó–∞–≥—Ä—É–∑–∫–∞":
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –∑–∞—è–≤–∫–∞–º–∏ (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)", type=["csv", "xlsx", "xls"], accept_multiple_files=True)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    def read_file(uploaded_file):
        try:
            if uploaded_file.name.endswith('.csv'):
                return pd.read_csv(uploaded_file, sep=',', index_col=None)
            else:
                return pd.read_excel(uploaded_file, index_col=None)
        except pd.errors.EmptyDataError:
            st.error("üö® –§–∞–π–ª –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        except Exception as e:
            st.error(f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {uploaded_file.name}: {e}")
        return None

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
    dataframes = []

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if files:
        for file in files:
            df = read_file(file)
            if df is not None:
                dataframes.append(df)
                st.success(f"–§–∞–π–ª {file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! üéâ")

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
        if dataframes:
            combined_df = pd.concat(dataframes, ignore_index=True)
            combined_file_name = 'combined_dataset.csv'
            combined_df.to_csv(combined_file_name, index=None)
            st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: combined_dataset.csv")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª",
                data=combined_df.to_csv(index=False).encode('utf-8'),
                file_name='combined_dataset.csv',
                mime='text/csv'
            )

            st.session_state.combined_df = combined_df

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
if choice == "–ê–Ω–∞–ª–∏–∑":
    st.title("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    if 'combined_df' in st.session_state:
        df = st.session_state.combined_df
        st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–æ–∫")
        st.write("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏ –≤—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.")
        profile = ProfileReport(df, minimal=True)
        st.components.v1.html(profile.to_html(), height=1000, scrolling=True)
    else:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
if choice == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":
    st.title("üìå –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–æ–∫")
    if 'combined_df' in st.session_state:
        df = st.session_state.combined_df

        # –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
        def extract_serial_number(text):
            match = re.search(r'\b[A-Z0-9]{8,}\b', text)
            return match.group(0) if match else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü '–û–ø–∏—Å–∞–Ω–∏–µ' –≤–º–µ—Å—Ç–æ '–°–æ–æ–±—â–µ–Ω–∏–µ'
        if '–û–ø–∏—Å–∞–Ω–∏–µ' in df.columns:
            df['–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(extract_serial_number)
            df['–¢–∏–ø –∑–∞—è–≤–∫–∏'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(lambda x: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è" if "–æ—à–∏–±–∫–∞" in x.lower() else "–û–±—â–∞—è")
            df['–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].apply(lambda x: "–°–µ—Ä–≤–µ—Ä" if "—Å–µ—Ä–≤–µ—Ä" in x.lower() else "–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è")

            st.write("–ü–µ—Ä–≤—ã–µ 5 –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            st.write(df.head())
        else:
            st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '–û–ø–∏—Å–∞–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã.")

    else:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV –∏ XML
if choice == "–≠–∫—Å–ø–æ—Ä—Ç":
    st.title("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    csv_data = df.to_csv(index=False)
    st.download_button(label="üìÇ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV", data=csv_data, file_name="export_data.csv", mime="text/csv")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ XML
    def to_xml(df):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ XML –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ 1–°.""" 
        root = ET.Element("Data")
        for _, row in df.iterrows():
            entry = ET.SubElement(root, "Entry")
            for col_name, col_value in row.items():
                col_element = ET.SubElement(entry, col_name)
                col_element.text = str(col_value)
        return ET.tostring(root, encoding="utf-8")

    xml_data = to_xml(df)
    st.download_button(label="üìÇ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XML", data=xml_data, file_name="export_data.xml", mime="application/xml")

    st.info("üì¶ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ 1–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏ XML.")
